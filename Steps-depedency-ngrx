Note:  After the service call only we can set the state.

Steps - 

1) Install the dependency in app from - 

	dependencies: 
		"@ngrx/effects": "^7.0.0",
	    "@ngrx/entity": "^7.0.0",
	    "@ngrx/router-store": "^7.0.0",
	    "@ngrx/store": "^7.0.0",
	    "@ngrx/store-devtools": "^7.0.0",
	    "ngrx-store-freeze": "^0.2.1",

	 devDependencies: 

	 	"@ngrx/schematics": "^7.0.0", - extension for Angular CLI, this allow quickly scaffolding code for reducer, action or entity.

Docs URL - https://github.com/ngrx/platform/tree/master/docs

2) Set Schematics - 

	ng config cli.defaultCollection @ngrx/schematics

3) At application level store - 

	ng generate store AppState --root --module app.module.ts

	Above command will generate the reducer folder and will modify the app.module.ts and will add the following entry - 

	StoreModule.forRoot(reducers, { metaReducers }),
    !environment.production ? StoreDevtoolsModule.instrument() : [],


4) Action schematics - 

	ng generate action auth/Auth - this will generate the auth.action inside the auth folder.

5) Error handler in .subscripe or in Web Socket service.

6) To add the extension we need search for - 'redux' in chrome web store. Add the extension for Redux Dev Tool.

7) We can see the redux icon at top right or by clicking on the inspect and find Redux.

8) reducer - Take the current state of the application and return the new state based on the action.


------------- Doing development using ng schematics and feature module ------------------

1) Generating the reducer for auth module.

	ng generate reducer Auth --flat=false --module auth/auth.module.ts

	Auth - Reducer filename
	--flat=flase -> avoid generating new folder.

2) Consuming the store using ngrx selectors.

	2.1) Normal way is - we can subscribe the store as we did in login page.

	2.2) We can use selector to extract the data in the better way.

	Selector is a function which takes sy=tate as input and slice the output.

	Using selector we can avoid the code execution each time in subscription to save the memory and increase the performance. 
	It will only get executed when the value of it gets changed from last stored value.



-------- Effect is to handle the store side effects. ------------


Saving the data into the localstorage/cookies for reload purpose is an example.

Side effect is basicall synchronizing the in memory data with the database.

Note : In case of login - Login can happened in multiple ways (using social media) so we need to execute the dispatch event of the store. So we need a service or Effect service to make it centralized.

Steps - 

	1) Create a service - ng generate effect auth/Auth --module auth/auth.module.ts

	auth.effect.ts

	$action observable will be emitting every time when an action gets dispatched.

	2) Take the code from Repo.

	3) Add the Effect in root module also with blank [].

		EffectsModule.forRoot([]);



--------- Store Freez -------------- dev dependency

This is to make sure that we do write our store reducer correctly at the time of the development.

This means that any action in the reducer should not mutate the state. All the reducer functions are pure function which takes a state as input and return the new state.

We can modify the store state directy but later it will create and issue, specially when use onpush change detection strategy.

ngrx store freez is a metareducer ( special type of reducer which gets executed after the main reducers). It take the store state as input and freez the each javascript property recursively by making them read only, it also prevents to adding new property to the object.


---------- Later to do : Video 22(4th Lesson) -------

----------- router store package------- @ngrx/router-store ---- This is not must implementation as this is for debuggin tool purpose ----

This is for time travel debugging.

Say when we change the routing and store state gets changed. So If we change the routing from browser navigation store state doesn't change.

To fix this we need @ngrx/router-store.

steps ---

	1) install the module.

	2) Add it into the root module - StoreRouterConnectingModule.forRoot(stateKey: 'router')

	Note: We don't need to store all the state of route params. It can be used for storing the queryparams and paramters.

	In order to make sure we do not store all the route state tree, we need to install "Custom Router Store"

	https://github.com/ngrx/platform/tree/master/docs/router-store

	https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#custom-router-state-serializer

	This will make sure to store small amount of the state in the router tree.

	find the code under the shared/utils.ts in the repo.

	3) Now configure the code into the module - 

	copy the providers code and add into the out root module providers. (See the code from repo or above URL)


	4) Add the router property into the root reducer - 

	export const reducers: ActionReducerMap<AppState> = {
		router: routerReducer // this line
	}



------- @ngrx entity - for course module ----------











